
module get_xor_xnor_bit(
	input wire [7:0] bits_in,
	input wire [3:0] curr_bit,
	input wire xor_xnor,
	output wire out_bit
);

	always @* begin
		case (curr_bit)
			0: out_bit = bits_in[0];
			1: out_bit = xor_xnor ? bits_in[0] ^ bits_in[1] : ~(bits_in[0] ^ bits_in[1]);
			2: out_bit = xor_xnor ? bits_in[1] ^ bits_in[2] : ~(bits_in[1] ^ bits_in[2]);
			3: out_bit = xor_xnor ? bits_in[2] ^ bits_in[3] : ~(bits_in[2] ^ bits_in[3]);
			4: out_bit = xor_xnor ? bits_in[3] ^ bits_in[4] : ~(bits_in[3] ^ bits_in[4]);
			5: out_bit = xor_xnor ? bits_in[4] ^ bits_in[5] : ~(bits_in[4] ^ bits_in[5]);
			6: out_bit = xor_xnor ? bits_in[5] ^ bits_in[6] : ~(bits_in[5] ^ bits_in[6]);
			7: out_bit = xor_xnor ? bits_in[6] ^ bits_in[7] : ~(bits_in[6] ^ bits_in[7]);
			8: out_bit = xor_xnor ? 1 : 0;
			default: out_bit = 0;
		endcase
	end

endmodule


module tmds_8_to_10_bit(
	input wire [7:0] bits_in,
	input wire [9:0] bits_out
)
	wire [3:0] num_ones = bits_in[0] + bits_in[1] + bits_in[2] + bits_in[3] + bits_in[4] + bits_in[5] + bits_in[6] + bits_in[7];


endmodule

module main(
	input wire clk,
	
	output wire led5,
	output wire led6
);
endmodule